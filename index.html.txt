<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VoiceGen | Text-to-Speech Converter</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-dark: #3a56d4;
            --secondary: #3f37c9;
            --danger: #f72585;
            --success: #4cc9f0;
            --warning: #f8961e;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            background-color: #f5f7fa;
            color: var(--dark);
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px 0;
        }
        
        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .logo i {
            font-size: 2rem;
            color: var(--primary);
        }
        
        h1 {
            font-size: 2.2rem;
            color: var(--primary);
            margin-bottom: 5px;
        }
        
        .subtitle {
            color: var(--gray);
            font-size: 1rem;
        }
        
        .card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            padding: 30px;
            margin-bottom: 30px;
        }
        
        .card-title {
            font-size: 1.2rem;
            margin-bottom: 20px;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .card-title i {
            font-size: 1.1rem;
        }
        
        textarea {
            width: 100%;
            height: 180px;
            padding: 15px;
            border: 2px solid var(--light-gray);
            border-radius: 8px;
            resize: vertical;
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        
        textarea:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .controls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .control-group {
            margin-bottom: 5px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
            font-size: 0.9rem;
        }
        
        select {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            border: 2px solid var(--light-gray);
            font-size: 0.95rem;
            background-color: white;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 1em;
        }
        
        select:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .range-control {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .range-control input[type="range"] {
            flex: 1;
            -webkit-appearance: none;
            height: 6px;
            background: var(--light-gray);
            border-radius: 3px;
        }
        
        .range-control input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            background: var(--primary);
            border-radius: 50%;
            cursor: pointer;
        }
        
        .range-value {
            min-width: 40px;
            text-align: center;
            font-weight: 600;
            color: var(--primary);
        }
        
        .button-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 12px 20px;
            border-radius: 8px;
            border: none;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            flex: 1;
            min-width: 150px;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
        }
        
        .btn-danger {
            background-color: var(--danger);
            color: white;
        }
        
        .btn-danger:hover {
            background-color: #e5177e;
            transform: translateY(-2px);
        }
        
        .btn-success {
            background-color: var(--success);
            color: white;
        }
        
        .btn-success:hover {
            background-color: #3ab8d9;
            transform: translateY(-2px);
        }
        
        .btn:disabled {
            background-color: var(--light-gray);
            color: var(--gray);
            cursor: not-allowed;
            transform: none;
        }
        
        .status {
            margin-top: 20px;
            padding: 12px 15px;
            border-radius: 8px;
            font-weight: 500;
            display: none;
        }
        
        .status.recording {
            display: block;
            background-color: rgba(248, 150, 30, 0.1);
            color: var(--warning);
            border-left: 4px solid var(--warning);
        }
        
        .status.success {
            display: block;
            background-color: rgba(76, 201, 240, 0.1);
            color: var(--success);
            border-left: 4px solid var(--success);
        }
        
        .status.error {
            display: block;
            background-color: rgba(247, 37, 133, 0.1);
            color: var(--danger);
            border-left: 4px solid var(--danger);
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px 0;
            color: var(--gray);
            font-size: 0.9rem;
        }
        
        .footer-text {
            margin-bottom: 5px;
        }
        
        .credit {
            font-style: italic;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            h1 {
                font-size: 1.8rem;
            }
            
            .card {
                padding: 20px;
            }
            
            .controls-grid {
                grid-template-columns: 1fr;
            }
            
            .btn {
                min-width: 100%;
            }
        }
        
        @media (max-width: 480px) {
            .logo i {
                font-size: 1.8rem;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            
            .subtitle {
                font-size: 0.9rem;
            }
            
            textarea {
                height: 150px;
                padding: 12px;
            }
            
            .btn {
                padding: 10px 15px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <i class="fas fa-robot"></i>
                <h1>VoiceGen</h1>
            </div>
            <p class="subtitle">Convert text to natural sounding speech in multiple languages</p>
        </header>
        
        <main>
            <div class="card">
                <div class="card-title">
                    <i class="fas fa-edit"></i>
                    <span>Enter Your Text</span>
                </div>
                <textarea id="textInput" placeholder="Type or paste your text here..."></textarea>
            </div>
            
            <div class="card">
                <div class="card-title">
                    <i class="fas fa-sliders-h"></i>
                    <span>Voice Settings</span>
                </div>
                
                <div class="controls-grid">
                    <div class="control-group">
                        <label for="languageSelect"><i class="fas fa-globe"></i> Language</label>
                        <select id="languageSelect">
                            <option value="en-US">English (US)</option>
                            <option value="en-GB">English (UK)</option>
                            <option value="es-ES">Spanish (Spain)</option>
                            <option value="fr-FR">French (France)</option>
                            <option value="de-DE">German (Germany)</option>
                            <option value="it-IT">Italian (Italy)</option>
                            <option value="pt-BR">Portuguese (Brazil)</option>
                            <option value="ru-RU">Russian (Russia)</option>
                            <option value="zh-CN">Chinese (China)</option>
                            <option value="ja-JP">Japanese (Japan)</option>
                            <option value="ko-KR">Korean (Korea)</option>
                            <option value="ar-SA">Arabic (Saudi Arabia)</option>
                            <option value="hi-IN">Hindi (India)</option>
                        </select>
                    </div>
                    
                    <div class="control-group">
                        <label for="voiceSelect"><i class="fas fa-user"></i> Voice</label>
                        <select id="voiceSelect" disabled>
                            <option value="">Loading voices...</option>
                        </select>
                    </div>
                    
                    <div class="control-group">
                        <label for="rateControl"><i class="fas fa-tachometer-alt"></i> Speech Rate</label>
                        <div class="range-control">
                            <input type="range" id="rateControl" min="0.5" max="2" step="0.1" value="1">
                            <span class="range-value" id="rateValue">1</span>
                        </div>
                    </div>
                    
                    <div class="control-group">
                        <label for="pitchControl"><i class="fas fa-wave-square"></i> Pitch</label>
                        <div class="range-control">
                            <input type="range" id="pitchControl" min="0.5" max="2" step="0.1" value="1">
                            <span class="range-value" id="pitchValue">1</span>
                        </div>
                    </div>
                </div>
                
                <div class="button-group">
                    <button id="speakBtn" class="btn btn-primary">
                        <i class="fas fa-play"></i> Speak
                    </button>
                    <button id="stopBtn" class="btn btn-danger" disabled>
                        <i class="fas fa-stop"></i> Stop
                    </button>
                    <button id="downloadBtn" class="btn btn-success" disabled>
                        <i class="fas fa-download"></i> Download MP3
                    </button>
                </div>
                
                <div id="status" class="status"></div>
            </div>
        </main>
        
        <footer>
            <div class="footer-text">VoiceGen &copy; 2023 | Text-to-Speech Converter</div>
            <div class="credit">This website built by Ajaya Tripathy</div>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const textInput = document.getElementById('textInput');
            const languageSelect = document.getElementById('languageSelect');
            const voiceSelect = document.getElementById('voiceSelect');
            const speakBtn = document.getElementById('speakBtn');
            const stopBtn = document.getElementById('stopBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const rateControl = document.getElementById('rateControl');
            const rateValue = document.getElementById('rateValue');
            const pitchControl = document.getElementById('pitchControl');
            const pitchValue = document.getElementById('pitchValue');
            const status = document.getElementById('status');
            
            let speechSynthesis = window.speechSynthesis;
            let voices = [];
            let audioContext;
            let mediaRecorder;
            let audioChunks = [];
            let isRecording = false;
            
            // Update range display values
            rateControl.addEventListener('input', () => {
                rateValue.textContent = rateControl.value;
            });
            
            pitchControl.addEventListener('input', () => {
                pitchValue.textContent = pitchControl.value;
            });
            
            // Load voices
            function loadVoices() {
                voices = speechSynthesis.getVoices();
                voiceSelect.innerHTML = '';
                
                // Filter voices by selected language
                const selectedLanguage = languageSelect.value;
                const filteredVoices = voices.filter(voice => 
                    voice.lang === selectedLanguage || voice.lang.startsWith(selectedLanguage.split('-')[0])
                );
                
                if (filteredVoices.length > 0) {
                    filteredVoices.forEach(voice => {
                        const option = document.createElement('option');
                        option.value = voice.name;
                        option.textContent = `${voice.name} (${voice.lang})${voice.default ? ' - DEFAULT' : ''}`;
                        voiceSelect.appendChild(option);
                    });
                    voiceSelect.disabled = false;
                } else {
                    const option = document.createElement('option');
                    option.textContent = 'No voices available for selected language';
                    voiceSelect.appendChild(option);
                    voiceSelect.disabled = true;
                }
            }
            
            // Initialize voices
            if (speechSynthesis.onvoiceschanged !== undefined) {
                speechSynthesis.onvoiceschanged = loadVoices;
            }
            
            // Load voices when language changes
            languageSelect.addEventListener('change', loadVoices);
            
            // Initialize audio context
            function initAudioContext() {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
            }
            
            // Show status message
            function showStatus(message, type = 'recording') {
                status.textContent = message;
                status.className = 'status ' + type;
            }
            
            // Hide status message
            function hideStatus() {
                status.className = 'status';
            }
            
            // Start recording
            async function startRecording() {
                try {
                    initAudioContext();
                    
                    const dest = audioContext.createMediaStreamDestination();
                    mediaRecorder = new MediaRecorder(dest.stream);
                    audioChunks = [];
                    
                    mediaRecorder.ondataavailable = (evt) => {
                        audioChunks.push(evt.data);
                    };
                    
                    mediaRecorder.onstop = async () => {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
                        const audioUrl = URL.createObjectURL(audioBlob);
                        
                        // Create download link
                        const a = document.createElement('a');
                        a.href = audioUrl;
                        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                        a.download = `voicegen-${timestamp}.mp3`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        
                        // Clean up
                        URL.revokeObjectURL(audioUrl);
                        isRecording = false;
                        showStatus('Recording completed and downloaded successfully!', 'success');
                        setTimeout(hideStatus, 3000);
                    };
                    
                    mediaRecorder.start();
                    isRecording = true;
                    showStatus('Recording audio... Speak now!');
                    
                    return dest;
                } catch (error) {
                    console.error('Recording error:', error);
                    showStatus('Recording failed: ' + error.message, 'error');
                    setTimeout(hideStatus, 3000);
                    return null;
                }
            }
            
            // Speak button handler
            speakBtn.addEventListener('click', async () => {
                if (textInput.value.trim() === '') {
                    showStatus('Please enter some text to speak', 'error');
                    setTimeout(hideStatus, 2000);
                    return;
                }
                
                if (speechSynthesis.speaking) {
                    speechSynthesis.cancel();
                }
                
                const utterance = new SpeechSynthesisUtterance(textInput.value);
                
                // Set voice
                const selectedVoice = voices.find(voice => voice.name === voiceSelect.value);
                if (selectedVoice) {
                    utterance.voice = selectedVoice;
                }
                
                // Set language
                utterance.lang = languageSelect.value;
                
                // Set rate and pitch
                utterance.rate = parseFloat(rateControl.value);
                utterance.pitch = parseFloat(pitchControl.value);
                
                // Enable/disable buttons during speech
                utterance.onstart = () => {
                    speakBtn.disabled = true;
                    stopBtn.disabled = false;
                    downloadBtn.disabled = true;
                    showStatus('Speaking...');
                };
                
                utterance.onend = utterance.onerror = () => {
                    speakBtn.disabled = false;
                    stopBtn.disabled = true;
                    downloadBtn.disabled = false;
                    
                    if (mediaRecorder && isRecording) {
                        mediaRecorder.stop();
                    } else {
                        hideStatus();
                    }
                };
                
                speechSynthesis.speak(utterance);
            });
            
            // Stop button handler
            stopBtn.addEventListener('click', () => {
                speechSynthesis.cancel();
                speakBtn.disabled = false;
                stopBtn.disabled = true;
                downloadBtn.disabled = false;
                
                if (mediaRecorder && isRecording) {
                    mediaRecorder.stop();
                }
                
                showStatus('Playback stopped', 'error');
                setTimeout(hideStatus, 2000);
            });
            
            // Download button handler
            downloadBtn.addEventListener('click', async () => {
                if (textInput.value.trim() === '') {
                    showStatus('Please enter some text to convert to speech', 'error');
                    setTimeout(hideStatus, 2000);
                    return;
                }
                
                speakBtn.disabled = true;
                stopBtn.disabled = false;
                downloadBtn.disabled = true;
                
                const utterance = new SpeechSynthesisUtterance(textInput.value);
                
                // Set voice
                const selectedVoice = voices.find(voice => voice.name === voiceSelect.value);
                if (selectedVoice) {
                    utterance.voice = selectedVoice;
                }
                
                // Set language
                utterance.lang = languageSelect.value;
                
                // Set rate and pitch
                utterance.rate = parseFloat(rateControl.value);
                utterance.pitch = parseFloat(pitchControl.value);
                
                // Start recording
                const dest = await startRecording();
                if (!dest) {
                    speakBtn.disabled = false;
                    stopBtn.disabled = true;
                    downloadBtn.disabled = false;
                    return;
                }
                
                // Create audio node for recording
                const audioNode = new Audio();
                audioNode.srcObject = dest.stream;
                
                // Speak and record
                utterance.onend = utterance.onerror = () => {
                    if (mediaRecorder && isRecording) {
                        mediaRecorder.stop();
                    }
                    speakBtn.disabled = false;
                    stopBtn.disabled = true;
                    downloadBtn.disabled = false;
                };
                
                speechSynthesis.speak(utterance);
            });
            
            // Initial voices load
            loadVoices();
            
            // Some browsers don't load voices immediately, so we check periodically
            let voiceCheckInterval = setInterval(() => {
                if (speechSynthesis.getVoices().length > 0) {
                    clearInterval(voiceCheckInterval);
                    loadVoices();
                }
            }, 100);
        });
    </script>
</body>
</html>